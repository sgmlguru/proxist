<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>ProXist</title>
        <author>
            <orgname/>
            <address>
                <city>City</city>
                <street>Street</street>
                <postcode>000000</postcode>
                <country>Country</country>
            </address>
            <email>ari.nordstrom@gmail.com</email>
        </author>
    </info>
    <section>
        <title>Intro and Overview</title>
        <para>This document attempts to document the eXist implementation of ProX. In doing so, it
            also documents ProX itself. The intention here is that the reasonably XML-savvy
            implementer can, efter reading through the relevant parts, install and run his or her
            own ProXist environement.</para>
        <section xml:id="section_wgq_c33_2n">
            <title>Prereqs</title>
            <itemizedlist>
                <para>Since most XML people I know of want to do it rather than read about it,
                    here's a list of requirements...</para>
                <listitem>
                    <para>eXist in version 2.1 or later.</para>
                </listitem>
                <listitem>
                    <para>For now, a modified Calabash JAR; this is available for download at the
                        official ProXist Github site. I expect this to change soon so you can use
                        the standard Calabash download instead.</para>
                </listitem>
                <listitem>
                    <para>The ProXist web app for eXist. This will give you the XQueries, XForm and
                        such, but <emphasis>not</emphasis> the ProX XProcs, XQ, etc. Blame me; I
                        packaged them separately.</para>
                </listitem>
                <listitem>
                    <para>The ProX package including wrapper XProcs, XSLT and XQ, not to mention the
                        basic ProX blueprint, the resource map template XML, and so on. This is why
                        you need this documentation.</para>
                </listitem>
                <listitem>
                    <para>For running the ProXist demo I ran at XML Prague 2014, the COSML package
                        containing a Relax NG schema, XProc pipelines and XSLT stylesheets. COSML is
                        simply a schema, RelaX NG these days but originally a DTD that was and is my
                        private general-purpose XML for documentation purposes<footnote>
                            <para>Except, obviously, this document.</para>
                        </footnote>. The XProc and XSLT are for doing various things with COSML
                        documents.</para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="section_mlk_nj3_2n">
            <title>Installation</title>
            <procedure>
                <para>To get the basic ProXist demo running, follow these steps:</para>
                <step>
                    <para>Install eXist 2.1 or later. TBA: Calabash module.</para>
                </step>
                <step>
                    <para>Configure eXist with whatever packages you need, such as a PDF rendering
                        engine if you require something else than FOP. Instructions at
                            <uri>Wikibooks - Wolfgang - TBA</uri>.</para>
                </step>
                <step>
                    <para>Get the modified Calabash JAR at <uri>XXX</uri> and replace the standard
                        JAR in XXX.</para>
                </step>
                <step>
                    <para>Install the ProXist web app.</para>
                </step>
                <step>
                    <para>Unpack the ProX and COSML packages in XXX and XXX. If you want to place
                        them elsewhere, you need to edit XXX with the new paths.</para>
                </step>
                <step>
                    <para>Unpack the example COSML files in XXX. Again, if you change the path, you
                        need to edit XXX.</para>
                </step>
                <step>
                    <para>Create a temporary output collection path. This is where ProXist will
                        place whatever files it creates. For now, give it generous permissions (I
                        use <quote>rwxrwxrwx</quote> but that's because the NSA hates me).</para>
                </step>
                <step>
                    <para>Edit <filename>resource-map-template.xml</filename><!--ADD PATH--> for any
                        changes done in the previous steps.</para>
                </step>
            </procedure>
            <para>You should now be done.</para>
        </section>
        <section xml:id="section_myj_sk3_2n">
            <title>Testing the Installation</title>
            <procedure>
                <para>To make sure that your shiny new ProXist installation works, try these
                    steps:</para>
                <step>
                    <para>From the eXist dashboard, hit the <guibutton>ProXist</guibutton> button.
                        The Web app should open in a separate tab or window, depending on your
                        browser setup.</para>
                </step>
                <step>
                    <para>Select a COSML XML input file and hit <guibutton>Generate resource
                            map</guibutton>. The XML should be a <quote>root  file</quote>,
                        basically meaning that it uses the <tag>cos</tag> element as root. It's kind
                        of nice if it's modularised in some way, because the demo becomes more fun,
                        but not strictly necesary.</para>
                </step>
                <step>
                    <para>Select a process, pipeline and output in the fancy GUI. Hit
                            <guibutton>Save and run child process</guibutton>. There should be some
                        kind of output placed in XXX and a link to that effect displayed right under
                        the button.</para>
                </step>
            </procedure>
            <note>
                <para>While it is theoretically possible to select an input file just once and then
                    run several processes in sequence, selecting a new one once the previous has
                    completed, this is not always reliable. I fully intend to fix this.</para>
            </note>
        </section>
    </section>
    <section xml:id="section_c5v_yl3_2n">
        <title>A ProX Overview</title>
        <para>ProX, basically, is an XML-based abstraction layer that describes XProc pipelines in a
            system context. Think of it as the Calabash command line expressed as XML, but expanding
            on it to define whatever resource (XProc, XSLT, XQ, XML...) the pipeline uses in that
            system as packages linked to by the XML. For example, there is a <tag>script</tag>
            element that will link to a <tag>package</tag> element that contains some metadata plus
            an element with the actual link to the XProc script. If the pipeline uses an XSLT
            stylesheet divided into a dozen modules, the command line XML includes a link to that
            package, again with some metadata and tha list of links to the XSLT modules. One or more
            of these links also identifies any entry points to the XSLT package.</para>
        <para>And so on. The ProX XML is a complete list of <emphasis>everything</emphasis> the
            pipeline is allowed to do in the system.</para>
        <para>But ProX takes things fiurther than that. The <tag>pipeline</tag>, in ProX speak, is
            part of a <tag>process</tag> that may include other <tag>pipeline</tag>s. For example,
            you might have a <quote>print publishing</quote>
            <tag>process</tag> that includes pipelines for PDF output, Word output, WordPerfect
            output (well, maybe not), and so on.</para>
        <para>Looking at the <tag>pipeline</tag> element's command line, a single pipeline may be
            configured in a number of ways, withy different stylesheets, different inputs and
            options, engine config, and so on, so each <tag>pipeline</tag> accepts one or more
            command lines or <tag>cmdline</tag> elements, each of these describing their own set of
            bindings, configuration, and so on.</para>
        <para>Here's an illustration of the basic ProX structure, expressed as a mind map:<figure>
                <title>Basic ProX Structure</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/processes-RNC.png"/>
                    </imageobject>
                </mediaobject>
            </figure></para>
        <!--IMAGE MIND MAP-->
        <para>A ProX XML document describing all possible processes, pipelines and their
            configurations in a given system is what I call a ProX <emphasis>blueprint</emphasis>,
            something that lists everything that this particular system can do. Not just one
            pipeline using one set of configurations, but every possible pipeline
            configuration.</para>
        <para>To describe a specific process using a specific pipeline with a specific
            configuration, selections must be made in the blueprint to narrow it down:</para>
        <!--IMAGE SELECTING PROX-->
        <para>Now, since the ProX blueprint is an XML file, it is easy to provide it as input to an
            XForm allowing the end user to make the selections using a GUI rather than an XML
            editor. Here's the ProXist GUI:<figure>
                <title>The ProXist GUI</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/chrome-proxist-app.png"/>
                    </imageobject>
                </mediaobject>
            </figure></para>
        <!--ProXist GUI-->
        <para>Once every possible selection has been made in the GUI, the results can be saved into
            what I call a ProX <emphasis>instance</emphasis>, something that describes a single
            process, a single pipeline and a single configuration. No ambiguity; every choice has
            been made. If this instance is given runtime values (such as the URI to the input
            document, the name of the output, etc), it becomes an XML version of a ready-to-run
            Calabash shell script that runs the actual publishing process.</para>
        <para>A simple XSLT can do that. The first ProX implementation was basically a file folder
            in htdocs on an Apache server and the XSLT target then was a shell script if Linux or
            Mac, and a batch file if Windows. In ProXist, the target document is an XQuery rather
            than a shell script, but the principle is unchanged.</para>
        <para>The process selected by the user is what I call a <emphasis>child process</emphasis>.
            The child process was intended to be self-contained, meaning that whatever it does is
            black-boxed; we don't need to know what it does, we only need to know that it finished
            as intended. Unfortunately, in ProXist, currently, this is not the case. For more on
            this, see XXX.</para>
        <para>For now, the child process returns XML markup containing whatever results that were
            produced by the child process. This is saved by the <quote>parent</quote> process, and
            sometimes also postprocessed, depending on what the markup is.</para>
        <section xml:id="section_x33_5pj_2n">
            <title>ProX Components</title>
            <itemizedlist>
                <para>ProX (and ProXist) uses various components that I thought better to list
                    before attempting to explain anything else. Here goes:</para>
                <listitem>
                    <para><emphasis>The ProX blueprint</emphasis> is an XML file adhering to a Relax
                        NG schema that describes every process, pipeline and configuration allowed
                        in some arbitrary context, usually a system. It also lists any packages used
                        by the pipelines (or rather, the configurations of these pipelines). These
                        packages consist of one or more links to the actual files included by that
                        package.</para>
                    <para>The blueprint also includes packages that define any other resources used
                        by ProX, such as any wrapper scripts or the XForm that presents the
                        blueprint to an end user. Basically, if ProX uses something, it should be
                        included in the blueprint. If a child process uses something, that something
                        should be included. You get the idea.</para>
                </listitem>
                <listitem>
                    <para><emphasis>The resource map</emphasis> is an XML file that maps the actual
                        locations of the resources defined in packages. It also lists the URIs of
                        any input XML and the URIs of any and all outputs. The latter is, for now,
                        generated by an XSLT but would in a proper system be decided by an external
                        function.</para>
                    <para>ProX was born in a system that linked things using URNs rather than URLs,
                        which necessitated a lookup mechanism to map the fixed URNs to the temporary
                        URLs the participating resources would get when processed, usuall in a temp
                        folder on a server somewhere. The lookup, then, consisted of a URN to URL
                        map in a simple XML format.</para>
                    <para>Some things in the map didn't have URNs so they were identified for ProX
                        purposes with <quote>ProX IDs</quote>. These values, made up when writing
                        the ProX blueprint, fill pretty much the same purpose as the URNs: they
                        provide an abstraction layer, in other words, avoiding addresses and
                        preferring names.</para>
                    <para>The ProX IDs may or may not survive in future versions, but for now, they
                        do have a purpose, which is to help look up things needed by ProX.</para>
                </listitem>
                <listitem>
                    <para><emphasis>The reosurce map template</emphasis> is a resource map
                        containing those resources that are considered to be <quote>static</quote>
                        in a system, meaning that they are not determined at runtime. Therefore,
                        every child process resource is listed in it, as is every ProX resource.
                        What isn't is the input and the output, since these can only be determined
                        at runtime.</para>
                </listitem>
                <listitem>
                    <para><emphasis>The ProX XForm</emphasis> is an XHTML file containing some
                        exciting XForms markup. In ProX, it was merely the ProX
                        process/pipeline/config selection mechanism; in ProXist, it also includes an
                        input selection mechanism. The XForm references the ProX blueprint,
                            <filename>prox-blueprint.xml</filename>, in an XForm model instance to
                        provide its selections to the end user. While the blueprint is statically
                        determined in ProXist (a nicer way to say that it's hard-coded in the
                        XForm), the blueprint URI should be added to the XForm at runtime<footnote>
                            <para>It was, in the original ProX demo, but time constraints made me
                                drop this particular feature in the first ProXist version. The
                                feature was in the XProc wrapper, but unfortunately that wrapper now
                                runs <emphasis>after</emphasis> the XForm.</para>
                        </footnote>, as it is listed in <filename>resource-map.xml</filename>. This
                        is not hard to do.</para>
                    <para>The input XML is listed using an XQuery,
                            <filename>list-resources.xq</filename>, referenced by the XForm.</para>
                    <para>The ProXist XForm uses an XQuery, <filename>gen-resmap.xq</filename>, to
                        generate a resource map XML file based on the input XML that is selected,
                        plus the resource map template. The XQ runs an XSLT,
                            <filename>doc-resources.xsl</filename>, that as of this writing is
                        somewhat specific to the COSML XML used in the demo, since it assumes
                        XLink-based links that use the linking elements <tag>inset</tag>,
                            <tag>block-inset</tag> and <tag>graphics</tag> to include modules. If
                        another XML format was used for input, say, DocBook or DITA, a different
                        XSLT would have to be written to handle XIncludes and such. This shouldn't
                        be very hard to do, so I'm probably going to do it at some point.</para>
                </listitem>
                <listitem>
                    <para>The second part of the XForm, the ProX selection mechanism, uses an
                        XQuery, <filename>save.xq</filename>, to save the ProX instance as selected
                        by the user, and then runs the <emphasis>XProc wrapper script</emphasis>.
                        When the XProc is done, <filename>save.xq</filename> saves the results
                        (hence the name, but you probably guessed that, right?) and, sometimes,
                        post-processes them. This last bit happens if the output is XSL-FO; the
                        XQuery then runs the PDF rendering engine.</para>
                </listitem>
                <listitem>
                    <para><emphasis>The XProc wrapper</emphasis> is, as the name suggests, a wrapper
                        pipeline that first converts the ProX instance to something it can run, and
                        then runs that something. This is where the actual child process runs, in
                        other words. The child should return well-formed, and sometimes valid, XML
                        that reflects the actual resulting contents, for now.</para>
                    <note>
                        <para>In an ideal world, the XML that is returned should merely be a URI to
                            the result, but the current state of affairs in eXist, in particular the
                            Calabash module or perhaps Calabash itself, stops the child from running
                            things like the <tag>xsl-formatter</tag> XProc step, whoch means that if
                            PDF is desired, it will have to be created <emphasis>after</emphasis>
                            the child process, not during it.</para>
                    </note>
                </listitem>
                <listitem>
                    <para>The wrapper XProc uses an XQuery, <filename>ch-mode.xq</filename>, that
                        changes the ownership, group and permisisons for the XQuery that has been
                        generated from the ProX instance. This is done so the XQ can be executed in
                        eXist. This, of course, is an ugly hack but reflects the author's skills
                        perfectly. A better way to do it would be to have
                            <filename>save.xq</filename> and whatever it runs with well-defined
                        permissions for the purpose.</para>
                </listitem>
                <listitem>
                    <para>In addition, ProX (obviously) uses whatever resources that are needed by
                        the child processes it defines.</para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="section_axs_q4j_2n">
            <title>ProX Attempt One</title>
            <procedure>
                <para>Mostly for historical reasons but also because things can be learned from it,
                    here's the basic steps of the first ProX demo (Balisage 2013):</para>
                <step>
                    <para>Start the <quote>wrapper XProc pipeline</quote>.This runs the whole ProX
                        chain, from start to finish, and the idea was for it to be a black box that
                        ran another black box, that is, the child process. Hence the names
                            <quote>wrapper</quote> and <quote>child</quote>, even though
                            <quote>parent</quote> might have been a better term. Never mind.</para>
                </step>
                <step>
                    <para>TBA</para>
                </step>
            </procedure>
        </section>
        <section xml:id="section_m5t_twj_2n">
            <title>ProXist</title>
            <procedure>
                <para>ProXist, on the other hand, is not a monolithic wrapper process, encapsulating
                    everything in a black box. Rather, it is a two-stage process loosely held
                    together by the XForm that displays the ProX UI.</para>
                <para>Here's what happens:</para>
                <step>
                    <para>TBA</para>
                </step>
            </procedure>
        </section>
    </section>
    <section xml:id="section_cnq_vwj_2n">
        <title>The ProX Relax NG Schema</title>
        <para/>
        <section xml:id="section_sc3_ywj_2n">
            <title>Processes</title>
            <para>The root element of the schema is the <tag>processes</tag> element that may
                contain (you guessed it) one or more <tag>process</tag> elements, each of which is
                meant to describe a <quote>process</quote> within the system.</para>
            <para>Here's the <tag>process</tag> structure:<figure>
                    <title>The <tag>process</tag> Element</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/Bal2013nord-2-012805.jpg"/>
                        </imageobject>
                    </mediaobject>
                </figure></para>
        </section>
        <section xml:id="section_ll4_zwj_2n">
            <title>Pipelines</title>
            <para>A process is an abstract grouping of related pipelines. They could be <quote>print
                    publishing</quote>, <quote>web publishing</quote> or <quote>shopping
                    lists</quote>, or basically anything the designer of the system considers to be
                a meaningful group in the context of the current system. It's an abstraction, but
                the pipelines it groups are actual pipelines.</para>
            <para>Here's the <tag>pipeline</tag> element:<figure>
                    <title>The <tag>pipeline</tag> Element</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/Bal2013nord-2-012806.jpg"/>
                        </imageobject>
                    </mediaobject>
                </figure></para>
        </section>
        <section xml:id="section_f5b_1xj_2n">
            <title>Command Lines</title>
            <para>A pipeline may be configured in a number of ways, with different options and input
                and whatnot, depending on what the pipeline is for, and so a command line as
                represented by the <tag>cmdline</tag> element in the ProX schema is simply one such
                configuration of that pipeline.</para>
            <para>Here's the <tag>cmdline</tag> element:<figure>
                    <title>The <tag>cmdline</tag> Element</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/Bal2013nord-2-012807.jpg"/>
                        </imageobject>
                    </mediaobject>
                </figure></para>
            <para>Here's the <tag>input</tag> element:<figure>
                    <title>The <tag>input</tag> Element</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/Bal2013nord-2-012808.jpg"/>
                        </imageobject>
                    </mediaobject>
                </figure></para>
            <para>TBA inputs are port/value pairs; params may be defined for an input that points out
                a stylesheet; params are port/value pairs ...</para>
            <para>TBA options are name/value pairs; can include params if option is used to
                reference a package??? params in options might not be a good idea - probably better
                to enforce a style to ProX (force any package reference to be made from an input or
                a script element)</para>
            <para>TBA values: types of values (pkg, external, uri, string, other) and their
                uses</para>
        </section>
        <section xml:id="section_frd_cxj_2n">
            <title>Packages</title>
            <para><emphasis>Packages</emphasis> are groups of related files used as one unit by a
                process. The XProc script itself, be it one file or several, can (and should) be
                defined as a package. The XSLT stylesheets used by XProc pipelines are normally
                modularised and split into several separate files, but should be defined as a
                package. And so on.</para>
            <note>
                <para>If the stylesheets use images to, for example, output a standardised page
                    footer, the images should be part of the stylesheet package as well.</para>
            </note>
            <para>Packages provide convenient grouping of related files, ensuring that all
                participating files are included. A package is intended to be a bit more than that,
                however: Firstly, if the system hosting the files can provide links to specific
                versions of each file<footnote>
                    <para>The system from which ProX originates uses URNs rather than URLs when
                        linking. The URNs contain not only a unique name but versioning and
                        language/country information for a specific incarnation of that name, so in
                        that system, the URN will always identify a unique, identifiable version of
                        a resource.</para>
                </footnote>, the package will list a number of varying versions of the participating
                files while ensuring that the specified versions can work together as a unit.</para>
            <para>Secondly, if the package is an XSLT stylesheet, it may list allowed and
                configurable parameters for the stylesheet, including the allowed values (and value
                types) for each parameter. See XXX (cmdline ref) for details.</para>
            <para>Here's the <tag>package</tag> element:<figure>
                    <title>The <tag>package</tag> Element</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/Bal2013nord-2-012809.jpg"/>
                        </imageobject>
                    </mediaobject>
                </figure></para>
            <para>The <tag>locator</tag> element provides an XLink to a package resource using a
                URI. In ProXist, the link is a URL pointing out an eXist resource.</para>
        </section>
        <section>
            <title>Metadata</title>
            <para>Processes, pipelines, command lines and packages include a <tag>metadata</tag>
                structure containing a <tag>title</tag> and a <tag>description</tag>. The
                    <tag>title</tag> should be short and descriptive, as it is used in the ProX
                XForm GUI, mostly in dropdown lists. The <tag>description</tag> should be a slightly
                longer description of the purpose of whatever the metadata describes; the ProX XForm
                uses it to display popups with context-sensitive information.</para>
            <note>
                <para>At some point hopefully reasonably soon, I intend to add <tag>metadata</tag>
                    structures to the <tag>param</tag> XSLT parameter definitions in the Relax NG
                    schema. Frequently, XSLT parameters are user-configurable<footnote>
                        <para>Even though ProXist does not currently support this, because of
                            limitations in the Calabash eXist module.</para>
                    </footnote> and rather than providing the frequently rather cryptic parameter
                    names (<quote>toc.depth</quote>, etc), it would be nice to use proper metadata
                    for the user interface.</para>
            </note>
        </section>
    </section>
    <section xml:id="section_wgz_cxj_2n">
        <title>Authoring ProX Blueprints</title>
        <para>Authoring a ProX blueprint is, while not for the faint of heart, not impossible,
            either. The first thing to remember is that it models a typical Calabash command line,
            but unlike one, it includes <emphasis>every</emphasis> binding allowed in the system the
            ProX blueprint is meant to describe.</para>
        <para>The second thing to remember, then, is simply that the blueprint is really just a a
            long list of configurations for a system: <quote>this process allows these two
                pipelines, which in turn allow these command lines linking to these stylesheet
                packages with these possible parameters...</quote> ProX is a definition language,
            and everything it defines has to do with processes in a system that do something with
            XML stored and handled by that system.</para>
        <section>
            <title>Processes</title>
            <para>The top-level <tag>processes</tag> structure is designed to include
                    <emphasis>every</emphasis> process in a system, but what comprises a
                    <quote>process</quote> is not defined by ProX.  TBA</para>
            <para>A <tag>process</tag> groups related pipelines, so there should be at least one
                pipeline per process. Each process should have a unique <tag>id</tag> attribute, so
                if your authoring environment does not generate <tag>id</tag> values, you should
                make sure to enter one manually whenever creating a new <tag>procedure</tag>.</para>
            <para>TBA system-wide packages, process-wide packages</para>
        </section>
        <section>
            <title>Pipelines</title>
            <para>A <tag>pipeline</tag> points out an XProc script and whatever command line options
                    (<tag>cmdline</tag>) it is allowed to use. Each <tag>pipeline</tag> should be
                given a unique <tag>id</tag> attribute value.</para>
            <para>The actual XProc script should be defined in a <tag>package</tag> and referenced
                from the <tag>script</tag> element. The <tag>script</tag> element includes link to
                the package in <tag>xlink:href</tag>:</para>
            <programlisting>&lt;pipeline id="id-pipeline-pdf-1">
    &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-1">
        &lt;title id="title-2013-4-9-16-53-8-39562387-1">Publish PDF&lt;/title>
        &lt;description id="description-2013-4-9-16-53-8-39562387-1">
            &lt;p id="p-2013-4-9-16-53-8-39562387-1">Normalizes, validates and 
                                                  converts a COSML document to PDF&lt;/p>
        &lt;/description>
    &lt;/metadata>
    &lt;script 
        type="pkg" 
        id="script-2013-4-9-16-53-8-39562387-" 
        xlink:href="urn:x-cassis:r1:cos:00002712:sv-SE:0.1#id-xproc-pdf" 
        xlink:title="XProc Pipeline for Normalize, Validate and PDF Normalizes, 
                     validates and publishes in PDF a COSML document "/>
    &lt;cmdlines id="cmdlines-2013-4-9-16-53-8-39562387-">
        
        ...
        
    &lt;/cmdlines>
&lt;/pipeline></programlisting>
            <para>Note that when referencing a package, the <tag>type</tag> attribut needs to be set
                to <quote>pkg</quote>.</para>
            <para>The package that is referenced may be elsewhere in the same physical ProX
                blueprint or in a separate module:</para>
            <programlisting>&lt;package id="id-xproc-pdf">
    &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-4">
        &lt;title id="title-2013-4-9-16-53-8-39562387-4">XProc Pipeline for Normalize, Validate and PDF&lt;/title>
        &lt;description id="description-2013-4-9-16-53-8-39562387-4">
            &lt;p id="p-2013-4-9-16-53-8-39562387-4">Normalizes, validates and publishes in PDF a COSML document&lt;/p>
        &lt;/description>
    &lt;/metadata>
    &lt;!-- publish-cosml-pdf.xpl -->
    &lt;locator type="main" xlink:href="urn:x-cassis:r1:cos:00002715:sv-SE:0.1" id="locator-2013-4-10-10-32-24-12830403-"/>
&lt;/package></programlisting>
            <para>Note the <tag>package</tag> element's <tag>id</tag> attribute value.</para>
        </section>
        <section>
            <title>Command Lines</title>
            <para>TBA</para>
        </section>
        <section>
            <title>Packages</title>
            <para>A <tag>package</tag> is basically some metadata and a list of links to physical
                files. When used by a pipeline command line option (say, an input), the whole
                    <tag>package</tag> is referenced by the pipeline's <tag>script</tag> element. It
                must therefore have a unique <tag>id</tag> attribute value.</para>
            <para>Every type of external resource referenced by a pipeline's command line should be
                defined as a package. The idea is that every package is a self-reliant unit; in
                other words, a package's links should always point to other modules in that same
                package, never to external resources.</para>
            <para>Here's a functionally complete package for an XSL-FO package:</para>
            <programlisting>&lt;package id="id-xslfo-cosml">
    &lt;metadata id="metadata-2013-4-9-16-53-8-39562387-5">
        &lt;title id="title-2013-4-9-16-53-8-39562387-5">XSL-FO Package for COSML PDF&lt;/title>
        &lt;description id="description-2013-4-9-16-53-8-39562387-5">
            &lt;p id="p-2013-4-9-16-53-8-39562387-5">Converts COSML documents to XSL-FO format for COS
                PDF layout&lt;/p>
        &lt;/description>
    &lt;/metadata>

    &lt;!-- Stylesheet parameters -->
    &lt;params id="params-2013-4-9-16-53-8-39562387-1">
        &lt;!-- Index generation -->
        &lt;param id="param-2013-4-9-16-53-8-39562387-3">
            &lt;port id="port-2013-4-9-16-53-8-39562387-9">xslt-params&lt;/port>
            &lt;name id="name-2013-4-9-16-53-8-39562387-5">generate.index&lt;/name>
            &lt;value type="string" id="value-2013-4-9-16-53-8-39562387-11">0&lt;/value>
        &lt;/param>
        &lt;!-- XEP Extensions -->
        &lt;param id="param-2013-4-9-16-53-8-39562387-4">
            &lt;port id="port-2013-4-9-16-53-8-39562387-10">xslt-params&lt;/port>
            &lt;name id="name-2013-4-9-16-53-8-39562387-6">xep.extensions&lt;/name>
            &lt;value type="string" id="value-2013-4-9-16-53-8-39562387-12">0&lt;/value>
        &lt;/param>
        &lt;!-- XSL-FO Bookmark Generation -->
        &lt;param id="param-2013-4-9-16-53-8-39562387-5">
            &lt;port id="port-2013-4-9-16-53-8-39562387-11">xslt-params&lt;/port>
            &lt;name id="name-2013-4-9-16-53-8-39562387-7">xslfo.bookmarks&lt;/name>
            &lt;value type="string" id="value-2013-4-9-16-53-8-39562387-13">1&lt;/value>
        &lt;/param>
    &lt;/params>

    &lt;!-- XSLT -->
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000232:sv-SE:0.6" 
        xlink:title="COS Internal XSLT"
        type="main" id="locator-2013-4-9-16-53-8-39562387-1"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000074:sv-SE:0.11"
        id="locator-2013-4-9-16-53-8-39562387-2"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000059:sv-SE:0.2"
        id="locator-2013-4-9-16-53-8-39562387-3"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000070:sv-SE:0.15"
        id="locator-2013-4-9-16-53-8-39562387-4" xlink:title="Layout"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000876:sv-SE:0.2"
        id="locator-2013-4-9-16-53-8-39562387-5" xlink:title="bookmarks.xsl"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000075:sv-SE:0.17"
        id="locator-2013-4-9-16-53-8-39562387-6"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000072:sv-SE:0.10"
        id="locator-2013-4-9-16-53-8-39562387-7" xlink:title="meta-data.xsl"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000078:sv-SE:0.9"
        id="locator-2013-4-9-16-53-8-39562387-8" xlink:title="TOC"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000062:sv-SE:0.9"
        id="locator-2013-4-9-16-53-8-39562387-9"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000233:sv-SE:0.8"
        id="locator-2013-4-9-16-53-8-39562387-10"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000061:sv-SE:0.29"
        id="locator-2013-4-9-16-53-8-39562387-11"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000065:sv-SE:0.6"
        id="locator-2013-4-9-16-53-8-39562387-12"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000071:sv-SE:0.6"
        id="locator-2013-4-9-16-53-8-39562387-13"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000077:sv-SE:0.6"
        id="locator-2013-4-9-16-53-8-39562387-14"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000079:sv-SE:0.7"
        id="locator-2013-4-9-16-53-8-39562387-15"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000060:sv-SE:0.7"
        id="locator-2013-4-9-16-53-8-39562387-16"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000064:sv-SE:0.8"
        id="locator-2013-4-9-16-53-8-39562387-17"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000066:sv-SE:0.2"
        id="locator-2013-4-9-16-53-8-39562387-18"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000069:sv-SE:0.3"
        id="locator-2013-4-9-16-53-8-39562387-19"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000063:sv-SE:0.3"
        id="locator-2013-4-9-16-53-8-39562387-20"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000785:sv-SE:0.6"
        id="locator-2013-4-9-16-53-8-39562387-21"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000076:sv-SE:0.10" 
        type="aux" xlink:title="Strings"
        id="locator-2013-4-9-16-53-8-39562387-22"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000230:sv-SE:0.1" 
        type="aux"
        id="locator-2013-4-9-16-53-8-39562387-23"/>
    &lt;locator xlink:href="urn:x-cassis:r1:cos:00000426:sv-SE:0.1" 
        type="aux"
        id="locator-2013-4-9-16-53-8-39562387-24" 
        xlink:title="tux.jpg"/>
&lt;/package>
</programlisting>
            <para>As with most other examples, the references are URNs, but obviously, they don't
                have to be.</para>
            <para>The topmost <tag>locator</tag> element includes a <tag>type</tag> attribute with
                the value <quote>main</quote>, which means that this particular module is an entry
                module and used when addressing the package.</para>
            <para>TBA type='aux'</para>
        </section>
        <section>
            <title>Modularisation and Reuse</title>
            <para>TBA</para>
        </section>
    </section>
    <section xml:id="section_rhj_3xj_2n">
        <title>The Resource Map XML Format</title>
        <para>The resource map is a well-formed XML file used for lookups. It is generated during
            the first step of the ProX wrapper process, after selecting an input file, and uses the
            input to list the input file and whatever modules it may use, and to generate runtime
            target file names<footnote>
                <para>This particular feature works, meaning that target names are created, but they
                    are unfortunately not used by the wrapper XQuery because of limitations in what
                    a child process can and cannot do inside eXist, given the current Calabash eXist
                    module.</para>
            </footnote>. It also lists any resources used by ProX, but these are static and are
            already defined in a <quote>resource map template</quote>.</para>
        <para>Here's a complete generated example (the one used by the XML Prague ProXist
            demo):</para>
        <programlisting>&lt;resource-map>
    &lt;docs>
        &lt;doc>
            &lt;root>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/prague-demo-root.xml&lt;/url>
                    &lt;type>doc-root&lt;/type>
                    &lt;prox-id>value-2013-4-9-16-53-8-39562387-&lt;/prox-id>
                    &lt;prox-id>value-2013-4-9-16-53-8-39562387-7&lt;/prox-id>
                    &lt;prox-id>id-html-docroot&lt;/prox-id>
                    &lt;prox-id>id-docroot-mm&lt;/prox-id>
                &lt;/resource>
            &lt;/root>
            &lt;modules>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/section1.xml&lt;/url>
                    &lt;type>xml&lt;/type>
                &lt;/resource>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/image1.png&lt;/url>
                    &lt;type>png&lt;/type>
                &lt;/resource>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/image2.gif&lt;/url>
                    &lt;type>gif&lt;/type>
                &lt;/resource>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/section2.xml&lt;/url>
                    &lt;type>xml&lt;/type>
                &lt;/resource>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/subsection1.xml&lt;/url>
                    &lt;type>xml&lt;/type>
                &lt;/resource>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/subsection2.xml&lt;/url>
                    &lt;type>xml&lt;/type>
                &lt;/resource>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/section3.xml&lt;/url>
                    &lt;type>xml&lt;/type>
                &lt;/resource>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/image3.png&lt;/url>
                    &lt;type>png&lt;/type>
                &lt;/resource>
                &lt;resource>
                    &lt;urn/>
                    &lt;url>http://localhost:8080/exist/rest/db/work/docs/XMLPrague/subsection3.xml&lt;/url>
                    &lt;type>xml&lt;/type>
                &lt;/resource>
            &lt;/modules>
        &lt;/doc>
    &lt;/docs>
    &lt;targets>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/prague-demo-root.pdf&lt;/url>
            &lt;type>primary&lt;/type>
            &lt;prox-id>value-2013-4-9-16-53-8-39562387-6&lt;/prox-id>
        &lt;/resource>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/prague-demo-root-id-normalized-pdf-int.xml&lt;/url>
            &lt;type>secondary&lt;/type>
            &lt;prox-id>id-normalized-pdf-int&lt;/prox-id>
        &lt;/resource>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/prague-demo-root.pdf&lt;/url>
            &lt;type>primary&lt;/type>
            &lt;prox-id>value-2013-4-9-16-53-8-39562387-10&lt;/prox-id>
        &lt;/resource>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/prague-demo-root-id-normalized-pdf-formal.xml&lt;/url>
            &lt;type>secondary&lt;/type>
            &lt;prox-id>id-normalized-pdf-formal&lt;/prox-id>
        &lt;/resource>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/prague-demo-root.html&lt;/url>
            &lt;type>primary&lt;/type>
            &lt;prox-id>id-htm-out&lt;/prox-id>
        &lt;/resource>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/prague-demo-root-id-normalized-html.xml&lt;/url>
            &lt;type>secondary&lt;/type>
            &lt;prox-id>id-normalized-html&lt;/prox-id>
        &lt;/resource>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/prague-demo-root.html&lt;/url>
            &lt;type>primary&lt;/type>
            &lt;prox-id>id-value-xref-htm&lt;/prox-id>
        &lt;/resource>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/files.xml&lt;/url>
            &lt;type>fixed&lt;/type>
            &lt;prox-id>files&lt;/prox-id>
        &lt;/resource>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/prague-demo-root.xml&lt;/url>
            &lt;type>primary&lt;/type>
            &lt;prox-id>id-mm-out&lt;/prox-id>
        &lt;/resource>
        &lt;resource>
            &lt;urn/>
            &lt;url>xmldb:exist:///db/work/tmp/prague-demo-root-id-normalized-mm.xml&lt;/url>
            &lt;type>secondary&lt;/type>
            &lt;prox-id>id-normalized-mm&lt;/prox-id>
        &lt;/resource>
    &lt;/targets>
    &lt;prox>
        &lt;!-- Blueprint used to get instance is here -->
        &lt;blueprints>
            &lt;resource id="id-prox-blueprint">
                &lt;urn>URN-OF-PROX-BLUEPRINT&lt;/urn>
                &lt;url>http://localhost:8080/exist/rest/db/work/system/prox/xml/prox-blueprint.xml&lt;/url>
                &lt;type/>
                &lt;prox-id/>
            &lt;/resource>
        &lt;/blueprints>

        &lt;!-- Saved ProX instances -->
        &lt;!-- Input to wrapper pipeline -->
        &lt;instances>
            &lt;resource id="id-prox-xform-target-instance">
                &lt;urn>URN-OF-TARGET-PROX-INSTANCE&lt;/urn>
                &lt;url>http://localhost:8080/exist/webdav/db/work/tmp/prox-instance.xml&lt;/url>
                &lt;!-- Insert file URI here for local testing -->
                &lt;type/>
                &lt;prox-id/>
            &lt;/resource>
            &lt;resource id="id-prox-xform-xmldb-instance">
                &lt;urn>URN-OF-TARGET-PROX-INSTANCE&lt;/urn>
                &lt;url>xmldb:exist:///db/work/tmp/prox-instance.xml&lt;/url>
                &lt;type/>
                &lt;prox-id/>
            &lt;/resource>
            &lt;resource id="id-prox-saved-instance">
                &lt;urn>URN-OF-SAVED-PROX-INSTANCE&lt;/urn>
                &lt;url>http://localhost:8080/exist/rest/db/work/tmp/prox-instance.xml&lt;/url>
                &lt;!-- Insert file URI here for local testing -->
                &lt;type/>
                &lt;prox-id/>
            &lt;/resource>
        &lt;/instances>
    &lt;/prox>
    &lt;prox-resources>

        &lt;!-- PDF Publishing XProc -->
        &lt;package>
            &lt;name>XProc Pipeline for Normalize, Validate and PDF&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002715:sv-SE:0.1&lt;/urn>
                    &lt;url>xmldb:exist:///db/work/system/cosml/xproc/publish-cosml-pdf.xpl&lt;/url>
                    &lt;prox-id>locator-2013-4-10-10-32-24-12830403-&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>

        &lt;!-- PDF Publishing XSL-FO, Internal -->
        &lt;package>
            &lt;name>XSL-FO Package for COSML PDF&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000232:sv-SE:0.6&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/cos-fo-internal.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-1&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000074:sv-SE:0.11&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/param.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-2&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000059:sv-SE:0.2&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/attribute-set.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-3&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000070:sv-SE:0.15&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/layout.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-4&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000876:sv-SE:0.2&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/bookmarks.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-5&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000075:sv-SE:0.17&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/static-content.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-6&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000072:sv-SE:0.10&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/meta-data.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-7&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000078:sv-SE:0.9&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/toc.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-8&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000062:sv-SE:0.9&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/body.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-9&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000233:sv-SE:0.8&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/sections.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-10&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000061:sv-SE:0.29&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/block.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-11&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000065:sv-SE:0.6&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/inline.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-12&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000071:sv-SE:0.6&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/list.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-13&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000077:sv-SE:0.6&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/table.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-14&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000079:sv-SE:0.7&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/xref.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-15&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000060:sv-SE:0.7&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/back.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-16&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000064:sv-SE:0.8&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/index.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-17&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000066:sv-SE:0.2&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/inset.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-18&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000069:sv-SE:0.3&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/l10n.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-19&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000063:sv-SE:0.3&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/extension.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-20&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000785:sv-SE:0.6&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/demo.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-21&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000076:sv-SE:0.10&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/fo/strings.xml&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-22&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000230:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/standard-images/logotyp.jpg&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-23&lt;/prox-id>
                &lt;/resource>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000426:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/standard-images/tux.jpg&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-24&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>

        &lt;!-- XHTML Publishing XProc -->
        &lt;package>
            &lt;name>XProc COSML2XHTML&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002756:sv-SE:0.2&lt;/urn>
                    &lt;url>xmldb:exist:///db/work/system/cosml/xproc/publish-cosml-html.xpl&lt;/url>
                    &lt;prox-id>id-xhtml-xproc&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>

        &lt;!-- XHTML Publishing XSLT -->
        &lt;package>
            &lt;name>COSML XHTML XSLT&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002755:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/xslt/cosml2html-ti.xsl&lt;/url>
                    &lt;prox-id>id-xhtml-xslt&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>

        &lt;!-- Xref Check XProc -->
        &lt;package>
            &lt;name>XProc Xref Check&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002757:sv-SE:0.2&lt;/urn>
                    &lt;url>xmldb:exist:///db/work/system/cosml/xproc/xref-check-cosml.xpl&lt;/url>
                    &lt;prox-id>id-xproc-xref&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>

        &lt;!-- Xref Check XSLT -->
        &lt;package>
            &lt;name>XSLT Xref Check&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002754:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/xslt/link-target-check-multifile.xsl&lt;/url>
                    &lt;prox-id>id-xslt-xref&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>
        
        &lt;!-- COSML to MM XProc -->
        &lt;package>
            &lt;name>XProc COSML to Mindmap&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00009099:sv-SE:0.1&lt;/urn>
                    &lt;url>xmldb:exist:///db/work/system/cosml/xproc/mindmap-cosml-modules.xpl&lt;/url>
                    &lt;prox-id>id-xproc-mm&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>
        
        &lt;!-- COSML to MM XSLT -->
        &lt;package>
            &lt;name>XSLT COSML to MM&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00009098:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/xslt/links2mindmap.xsl&lt;/url>
                    &lt;prox-id>id-xslt-mm&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>
        

        &lt;!-- Standard Normalize XSLT for Publishing -->
        &lt;package>
            &lt;name>Normalize XSLT&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00000073:sv-SE:0.4&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/cosml/xslt/normalize-2.xsl&lt;/url>
                    &lt;prox-id>locator-2013-4-9-16-53-8-39562387-26&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>

        &lt;!-- Calabash Engine Configuration -->
        &lt;package>
            &lt;name>Calabash Configuration&lt;/name>
            &lt;resources>
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002745:sv-SE:0.1&lt;/urn>
                    &lt;url>file:///home/ari/xmlcalabash-1.0.9-94/conf-calabash.xml&lt;/url>
                    &lt;prox-id>id-loc-calabash-config&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>
    &lt;/prox-resources>
    &lt;wrapper-pipeline>

        &lt;!-- Wrapper Pipeline Resources -->
        &lt;package>
            &lt;name>Wrapper Pipeline Processing&lt;/name>
            &lt;resources>
                &lt;!-- Wrapper Pipeline -->
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002735:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/prox/proxist-wrapper.xpl&lt;/url>
                    &lt;prox-id>id-wrapper-xpl&lt;/prox-id>
                &lt;/resource>
                &lt;!-- ProX Instance Update -->
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002732:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/prox/xslt/prox-fix.xsl&lt;/url>
                    &lt;prox-id>id-prox-fix&lt;/prox-id>
                &lt;/resource>
                &lt;!-- URN2URL for XML Input -->
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002733:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/prox/xslt/urn2url.xsl&lt;/url>
                    &lt;prox-id>id-urn2url&lt;/prox-id>
                &lt;/resource>
                &lt;!-- ProX Instance Conversion to Shell Script -->
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002731:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/prox/xslt/prox2shell.xsl&lt;/url>
                    &lt;prox-id>id-prox2shell&lt;/prox-id>
                &lt;/resource>
                &lt;!-- ProX Instance Conversion to XQ -->
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00012731:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/prox/xslt/prox2xq.xsl&lt;/url>
                    &lt;prox-id>id-prox2xq&lt;/prox-id>
                &lt;/resource>
                &lt;!-- Engine parameters required by ProX to Shell Script conversion -->
                &lt;resource>
                    &lt;urn>urn:x-cassis:r1:cos:00002734:sv-SE:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/work/system/prox/xml/prox2shell-config.xml&lt;/url>
                    &lt;prox-id>id-prox2shell-config&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>

        &lt;!-- XForm for ProX Process Configuration -->
        &lt;package>
            &lt;name>ProX XForm&lt;/name>
            &lt;resources>
                &lt;!-- XForm for proX Blueprint Handling -->
                &lt;resource>
                    &lt;urn>urn:prox:xform:0.1&lt;/urn>
                    &lt;url>http://localhost:8080/exist/rest/db/apps/proxist/select-prox.xhtml&lt;/url>
                    &lt;prox-id>id-loc-xform&lt;/prox-id>
                &lt;/resource>
            &lt;/resources>
        &lt;/package>
    &lt;/wrapper-pipeline>
&lt;/resource-map></programlisting>
        <para>TBA description of components: docs, targets, prox, prox-resources,
            wrapper-pipeline...</para>
    </section>
    <section xml:id="section_v5w_fy1_24">
        <title>Processes Schema Reference</title>
        <para>This section contains an element reference for the <filename>processes</filename>
            Relax NG schema.</para>
        <section xml:id="section_xls_gz1_24">
            <title>cmdline</title>
            <para><tag>cmdline</tag> describes a single set of allowed configurable options for a
                pipeline.</para>
        </section>
        <section xml:id="section_s52_cz1_24">
            <title>cmdlines</title>
            <para><tag>cmdlines</tag> is a wrapper element grouping all allowed command lines
                    (<tag>cmdline</tag> elements) for a specific pipeline.</para>
        </section>
        <section xml:id="section_dmc_25b_24">
            <title>config</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_ucl_k5b_24">
            <title>data-input</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_fw5_35b_24">
            <title>data-inputs</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_igh_dvb_24">
            <title>debug</title>
            <!--Should be deprecated-->
            <para>TBA</para>
        </section>
        <section xml:id="section_wls_w1b_24">
            <title>description</title>
            <para><tag>description</tag> is a wrapper element for descriptive texts in ProX
                component metadata, used for component help texts. Descriptions give a short
                description of the component, suitable for </para>
        </section>
        <section xml:id="section_utz_l5b_24">
            <title>engine-config</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_zrm_n5b_24">
            <title>extensions</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_jgz_n5b_24">
            <title>extension</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_mg1_ctb_24">
            <title>input</title>
            <para><tag>input</tag> defines a single input binding for an XProc pipeline. An
                    <tag>input</tag> lists an input port (in a <tag>port</tag> element) and its
                corresponding value.</para>
            <note>
                <para>While an input might be configurable with several different input values,
                    currently, ProX only allows for a single value for each input binding. If you
                    need to define a process that allows different values for the same input binding
                    (for example, a pipeline might allow different stylesheet packages to be pointed
                    out using the same input), you should use a separate command line group
                        (<tag>cmdline</tag>) for each such variant.</para>
            </note>
        </section>
        <section xml:id="section_gkr_ysb_24">
            <title>inputs</title>
            <para><tag>inputs</tag> is a wrapper element for every defined input binding for a
                pipeline.</para>
        </section>
        <section xml:id="section_bnt_5mb_24">
            <title>inset</title>
            <para>An <tag>inset</tag> element is an inclusion link to another ProX module, enabling
                the modularisation of ProX blueprints. For example, instead of including a
                    <tag>package</tag> structure directly inside the <tag>packages</tag> wrapper, it
                might be linked to.</para>
        </section>
        <section xml:id="section_ewb_x5b_24">
            <title>libraries</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_rgp_x5b_24">
            <title>library</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_ofj_p5b_24">
            <title>locator</title>
            <para><tag>locator</tag> links to an external package resource.</para>
        </section>
        <section xml:id="section_wmw_l1b_24">
            <title>metadata</title>
            <para><tag>metadata</tag> is a wrapper element for metadata describing a process,
                pipeline, package or parameter. This metadata is used to generate label texts for
                user interface components (for example, dropdown list items) and help texts (for
                example, popup help texts).</para>
        </section>
        <section xml:id="section_yrs_3lb_24">
            <title>name</title>
            <para><tag>name</tag> identifies an XProc pipeline binding's name.</para>
        </section>
        <section xml:id="section_k2k_h5b_24">
            <title>option</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_rq5_h5b_24">
            <title>options</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_qlr_c5b_24">
            <title>output</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_amb_d5b_24">
            <title>outputs</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_qnd_mjb_24">
            <title>p</title>
            <para><tag>p</tag> is a paragraph in a <tag>description</tag> element.</para>
        </section>
        <section xml:id="section_e42_f1b_24">
            <title>package</title>
            <para><tag>package</tag> lists links to the resources that form a well-defined package,
                such as a set of related XSLT stylesheets and any other files that might be required
                by the XSLT package. It also lists metadata for the package.</para>
        </section>
        <section xml:id="section_bs5_kz1_24">
            <title>packages</title>
            <para><tag>packages</tag> is a wrapper element containing individual packages common to
                either all processes, a single process or a single pipeline<footnote>
                    <para>Since packages are referenced by <tag>value</tag> or <tag>script</tag>
                        elements using a simple XLink pointer, there is currently nothing to stop
                        you from referencing a scoped package from outside that scope; this is
                        simply a convention I think is useful.</para>
                </footnote>.</para>
        </section>
        <section xml:id="section_o1z_sjb_24">
            <title>param</title>
            <para><tag>param</tag> describes the allowed and configurable behaviour of a single XSLT
                parameter. It does <emphasis>not</emphasis> describe every possible parameter value;
                it only describes a parameter and its values, <emphasis>if</emphasis> they are of
                interest when running the ProX process that uses the XSLT.</para>
            <para>In addition to metadata, used to give the parameter a human-readable label and
                help text, a <tag>param</tag> element lists the parameter port used by the pipeline
                (in a <tag>port</tag> element), the parameter's name (in a <tag>name</tag> element)
                and the parameter's allowed value or values (in<tag>value</tag> elements).</para>
        </section>
        <section xml:id="section_ush_qjb_24">
            <title>params</title>
            <para><tag>params</tag> is a wrapper element for XSLT parameters (<tag>param</tag>
                elements).</para>
        </section>
        <section xml:id="section_lmx_jnb_24">
            <title>pipe</title>
            <para><tag>pipe</tag> identifies an XProc step inside a <tag>pipeline</tag><footnote>
                    <para>Conceivably used to run a single XProc step rather than a whole
                        script.</para>
                </footnote></para>
        </section>
        <section xml:id="section_sbw_ty1_24">
            <title>pipeline</title>
            <para><tag>pipeline</tag> describes a single XProc pipeline and its allowed
                configuration and runtime options.</para>
        </section>
        <section xml:id="section_ahg_xy1_24">
            <title>pipelines</title>
            <para><tag>pipelines</tag> is a wrapper element for all allowed pipelines defined to be
                part of the same process (in a <tag>process</tag> element).</para>
        </section>
        <section xml:id="section_t11_skb_24">
            <title>port</title>
            <para><tag>port</tag> identifies an XProc pipeline binding's port.</para>
        </section>
        <section xml:id="section_r1g_qy1_24">
            <title>process</title>
            <para><tag>process</tag> is a wrapper for a specific <quote>process</quote>, a somewhat
                arbitrary goruping of related pipelines.</para>
        </section>
        <section xml:id="section_ffj_my1_24">
            <title>processes</title>
            <para><tag>processes</tag> is a wrapper element for <tag>process</tag> elements and the
                topmost element of the ProX schema.</para>
        </section>
        <section xml:id="section_cmk_bvb_24">
            <title>processor</title>
            <para>TBA</para>
        </section>
        <section xml:id="section_uvs_1vb_24">
            <title>saxon</title>
            <!--Should be deprecated-->
            <para>TBA</para>
        </section>
        <section xml:id="section_mjg_2vb_24">
            <title>schema-aware</title>
            <!--Should be deprecated-->
            <para>TBA</para>
        </section>
        <section xml:id="section_uxf_fnb_24">
            <title>script</title>
            <para><tag>script</tag> identifies the actual XProc script, either directly in the form
                of a URI or as a link to a ProX <tag>package</tag>.</para>
        </section>
        <section xml:id="section_bqs_t1b_24">
            <title>title</title>
            <para><tag>title</tag> identifies a descripitive label for a ProX component, used for
                user interface labels.</para>
        </section>
        <section xml:id="section_jzq_wkb_24">
            <title>value</title>
            <para><tag>value</tag> lists a pipeline binding's allowed value. A binding in ProX may
                include several values (one for each allowed value), which means that unlike a
                ready-to-run XProc pipeline script, ProX blueprints need to list every allowed value
                for every configurable binding. The ready-to-run XProc pipeline, then, is equivalent
                to a ProX instance.</para>
            <para><tag>value</tag>s may be used for many different types of values, depending on
                what is being described. For example, an XSLT parameter's available values may be an
                ennumerated list, which means that there would be one <tag>value</tag> for each list
                item. An <tag>input</tag>'s allowed values, on the other hand, might be references
                to the XSLT stylesheet <tag>package</tag>s that may be used by the pipeline at hand,
                in which case each <tag>value</tag> will instead be a link to a <tag>package</tag>
                element listing the package resources.</para>
            <para>Or, a <tag>value</tag> may not be known until runtime; it could be the name of the
                input XML file, provided by the system, or a calculated output filename.</para>
            <para>To know what kind of <tag>value</tag> is intended, ProX <tag>value</tag>s use an
                ennumerated list of <tag>type</tag> attribute values. The attribute value
                    <quote>external</quote>, for example, identifies a runtime value while
                    <quote>pkg</quote> identifies a package reference.</para>
            <para>TBA mimetype, input-type, output-type attributes</para>
        </section>
    </section>
</article>
